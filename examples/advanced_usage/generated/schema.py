# THIS FILE IS AUTO-GENERATED BY yaml2py.
# DO NOT EDIT THIS FILE MANUALLY.

from typing import Any, Dict, List, Union, Optional
import os


class ConfigSchema:
    """
    配置架構基礎類，用於處理 YAML 配置的資料存取。

    提供方法來返回屬性名稱和值，並支援敏感信息的遮罩處理。
    """
    def __init__(self, data: Dict[str, Any]) -> None:
        """
        初始化 ConfigSchema 實例。

        參數：
            data (Dict[str, Any]): YAML 配置資料字典。
        """
        self._data = data
        
    def return_properties(self, return_type="list", mask_sensitive=True):
        """
        返回所有 @property 方法的名稱和對應的值。

        參數：
            return_type (str): 指定返回格式，'list' 返回列表，'dict' 返回字典。
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理。

        返回：
            list 或 dict: 包含 @property 名稱和值的列表或字典。
        """
        if return_type == "dict":
            payload = {}
        elif return_type == "list":
            payload = []
        else:
            raise ValueError("Invalid return_type. Must be 'list' or 'dict'.")

        sensitive_keywords = [
            "password", "pwd", "api_token", "token", "appkey", "secret", "key",
        ]

        def mask_value(value):
            """
            對敏感值進行遮罩處理。

            參數：
                value: 要遮罩的值。

            返回：
                str: 遮罩後的值。
            """
            value_str = str(value)
            if len(value_str) > 4:
                return value_str[:2] + "*" * (len(value_str) - 4) + value_str[-2:]
            return value

        for attr_name in dir(self):
            attr = getattr(self.__class__, attr_name, None)
            if isinstance(attr, property):
                try:
                    value = getattr(self, attr_name)
                    if mask_sensitive and any(
                        keyword.lower() in attr_name.lower()
                        for keyword in sensitive_keywords
                    ):
                        value = mask_value(value)
                except Exception as e:
                    value = "<Error: " + str(e) + ">"

                if return_type == "dict":
                    payload[attr_name] = value
                elif return_type == "list":
                    payload.append(str(attr_name) + ": " + str(value))

        return payload
    
    def to_dict(self) -> Dict[str, Any]:
        """
        將配置轉換為字典格式。
        
        返回：
            Dict[str, Any]: 配置資料字典。
        """
        return self._data.copy()
    
    def __repr__(self) -> str:
        """返回物件的字串表示。"""
        class_name = self.__class__.__name__
        props = self.return_properties(return_type="dict", mask_sensitive=True)
        return f"{class_name}({props})"


# ---------- GENERATED CLASSES START ----------
class ProviderSchema(ConfigSchema):
    """[provider] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def name(self) -> str:
        """Get name value"""
        return self._data.get('name', 'oauth2')

    @property
    def client_id(self) -> str:
        """Get client_id value"""
        return self._data.get('client_id', 'client_123')

    @property
    def client_secret(self) -> str:
        """Get client_secret value"""
        value = self._data.get('client_secret')
        return '*' * 8 if value else None


class AuthenticationSchema(ConfigSchema):
    """[authentication] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def providers(self) -> List[ProviderSchema]:
        """Get providers list"""
        items = self._data.get('providers', [])
        return [ProviderSchema(item) for item in items]


class CachingSchema(ConfigSchema):
    """[caching] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def backend(self) -> str:
        """Get backend value"""
        return self._data.get('backend', 'redis')

    @property
    def ttl(self) -> int:
        """Get ttl value"""
        return self._data.get('ttl', 300)


class FeaturesSchema(ConfigSchema):
    """[features] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def authentication(self) -> AuthenticationSchema:
        """Get authentication configuration"""
        return AuthenticationSchema(self._data.get('authentication', {}))

    @property
    def caching(self) -> CachingSchema:
        """Get caching configuration"""
        return CachingSchema(self._data.get('caching', {}))


class AppSchema(ConfigSchema):
    """[app] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def name(self) -> str:
        """Get name value"""
        return self._data.get('name', 'AdvancedExample')

    @property
    def version(self) -> str:
        """Get version value"""
        return self._data.get('version', '2.0.0')

    @property
    def environment(self) -> str:
        """Get environment value"""
        return self._data.get('environment', 'production')

    @property
    def features(self) -> FeaturesSchema:
        """Get features configuration"""
        return FeaturesSchema(self._data.get('features', {}))


class EndpointSchema(ConfigSchema):
    """[endpoint] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def path(self) -> str:
        """Get path value"""
        return self._data.get('path', '/users')

    @property
    def method(self) -> str:
        """Get method value"""
        return self._data.get('method', 'GET')

    @property
    def rate_limit(self) -> int:
        """Get rate_limit value"""
        return self._data.get('rate_limit', 1000)

    @property
    def auth_required(self) -> bool:
        """Get auth_required value"""
        return self._data.get('auth_required', True)


class ApiSchema(ConfigSchema):
    """[api] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def base_url(self) -> str:
        """Get base_url value"""
        return self._data.get('base_url', 'https://api.example.com')

    @property
    def version(self) -> str:
        """Get version value"""
        return self._data.get('version', 'v2')

    @property
    def endpoints(self) -> List[EndpointSchema]:
        """Get endpoints list"""
        items = self._data.get('endpoints', [])
        return [EndpointSchema(item) for item in items]


class OptionsSchema(ConfigSchema):
    """[options] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def pool_size(self) -> int:
        """Get pool_size value"""
        return self._data.get('pool_size', 50)

    @property
    def max_overflow(self) -> int:
        """Get max_overflow value"""
        return self._data.get('max_overflow', 10)

    @property
    def pool_timeout(self) -> int:
        """Get pool_timeout value"""
        return self._data.get('pool_timeout', 30)


class PrimarySchema(ConfigSchema):
    """[primary] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def engine(self) -> str:
        """Get engine value"""
        return self._data.get('engine', 'postgresql')

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', 'db-primary.example.com')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 5432)

    @property
    def name(self) -> str:
        """Get name value"""
        return self._data.get('name', 'prod_db')

    @property
    def user(self) -> str:
        """Get user value"""
        return self._data.get('user', 'db_admin')

    @property
    def password(self) -> str:
        """Get password value"""
        value = self._data.get('password')
        return '*' * 8 if value else None

    @property
    def options(self) -> OptionsSchema:
        """Get options configuration"""
        return OptionsSchema(self._data.get('options', {}))


class ReplicaSchema(ConfigSchema):
    """[replica] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def engine(self) -> str:
        """Get engine value"""
        return self._data.get('engine', 'postgresql')

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', 'db-replica.example.com')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 5432)

    @property
    def name(self) -> str:
        """Get name value"""
        return self._data.get('name', 'prod_db')

    @property
    def user(self) -> str:
        """Get user value"""
        return self._data.get('user', 'db_reader')

    @property
    def password(self) -> str:
        """Get password value"""
        value = self._data.get('password')
        return '*' * 8 if value else None

    @property
    def options(self) -> OptionsSchema:
        """Get options configuration"""
        return OptionsSchema(self._data.get('options', {}))


class DatabaseSchema(ConfigSchema):
    """[database] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def primary(self) -> PrimarySchema:
        """Get primary configuration"""
        return PrimarySchema(self._data.get('primary', {}))

    @property
    def replica(self) -> ReplicaSchema:
        """Get replica configuration"""
        return ReplicaSchema(self._data.get('replica', {}))


class ServicesSchema(ConfigSchema):
    """[services] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def api(self) -> ApiSchema:
        """Get api configuration"""
        return ApiSchema(self._data.get('api', {}))

    @property
    def database(self) -> DatabaseSchema:
        """Get database configuration"""
        return DatabaseSchema(self._data.get('database', {}))


class ExporterSchema(ConfigSchema):
    """[exporter] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'prometheus')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 9090)


class MetricsSchema(ConfigSchema):
    """[metrics] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def interval(self) -> int:
        """Get interval value"""
        return self._data.get('interval', 60)

    @property
    def exporters(self) -> List[ExporterSchema]:
        """Get exporters list"""
        items = self._data.get('exporters', [])
        return [ExporterSchema(item) for item in items]


class HandlerSchema(ConfigSchema):
    """[handler] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'file')

    @property
    def path(self) -> str:
        """Get path value"""
        return self._data.get('path', '/var/log/app.log')

    @property
    def max_bytes(self) -> int:
        """Get max_bytes value"""
        return self._data.get('max_bytes', 10485760)

    @property
    def backup_count(self) -> int:
        """Get backup_count value"""
        return self._data.get('backup_count', 5)


class LoggingSchema(ConfigSchema):
    """[logging] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def level(self) -> str:
        """Get level value"""
        return self._data.get('level', 'INFO')

    @property
    def handlers(self) -> List[HandlerSchema]:
        """Get handlers list"""
        items = self._data.get('handlers', [])
        return [HandlerSchema(item) for item in items]


class MonitoringSchema(ConfigSchema):
    """[monitoring] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def metrics(self) -> MetricsSchema:
        """Get metrics configuration"""
        return MetricsSchema(self._data.get('metrics', {}))

    @property
    def logging(self) -> LoggingSchema:
        """Get logging configuration"""
        return LoggingSchema(self._data.get('logging', {}))


class RegionSchema(ConfigSchema):
    """[region] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def name(self) -> str:
        """Get name value"""
        return self._data.get('name', 'us-east-1')

    @property
    def primary(self) -> bool:
        """Get primary value"""
        return self._data.get('primary', True)

    @property
    def replicas(self) -> int:
        """Get replicas value"""
        return self._data.get('replicas', 3)


class DeploymentSchema(ConfigSchema):
    """[deployment] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def regions(self) -> List[RegionSchema]:
        """Get regions list"""
        items = self._data.get('regions', [])
        return [RegionSchema(item) for item in items]

# ---------- GENERATED CLASSES END ----------